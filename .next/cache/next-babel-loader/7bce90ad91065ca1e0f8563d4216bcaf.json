{"ast":null,"code":"import _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/Taivnaa/Desktop/github/sandwich-builder/src/containers/SandwichBuilder/SandwichBuilder.js\";\nvar __jsx = React.createElement;\nimport React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport * as actions from \"../../store/actions\";\nimport Sandwich from \"../../components/Sandwich/Sandwich\";\nimport Spinner from \"../../components/UI/Spinner\";\nimport Modal from \"../../components/UI/Modal/Modal\";\nimport OrderSummary from \"../../components/Sandwich/OrderSummary/OrderSummary\";\nimport BuildControls from \"../../components/Sandwich/BuildControls/BuildControls\";\n\nclass SandwichBuilder extends Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      purchasing: false\n    });\n\n    _defineProperty(this, \"purchaseHandler\", () => {\n      this.setState({\n        purchasing: true\n      });\n    });\n\n    _defineProperty(this, \"purchaseCancelHandler\", () => {\n      this.setState({\n        purchasing: false\n      });\n    });\n  }\n\n  componentDidMount() {\n    this.props.onIngredientsInitialize();\n  }\n\n  render() {\n    const disabledInfo = _objectSpread({}, this.props.ings);\n\n    for (let key in disabledInfo) {\n      disabledInfo[key] = disabledInfo[key] <= 0;\n    }\n\n    let sandwich = this.props.error ? \"Something went wrong\" : __jsx(Spinner, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36\n      },\n      __self: this\n    });\n    let orderSummary = null;\n\n    if (this.props.ings) {\n      sandwich = __jsx(React.Fragment, null, __jsx(Sandwich, {\n        ingredients: this.props.ings,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 42\n        },\n        __self: this\n      }), __jsx(BuildControls, {\n        ingredientAdded: this.props.onIngredientAdd,\n        ingredientRemoved: this.props.onIngredientRemove,\n        disabled: disabledInfo,\n        price: this.props.price,\n        ordered: this.purchaseHandler,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 43\n        },\n        __self: this\n      }));\n      orderSummary = __jsx(OrderSummary, {\n        ingredients: this.props.ings,\n        purchaseCancelled: this.purchaseCancelHandler,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54\n        },\n        __self: this\n      });\n    }\n\n    return __jsx(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    }, __jsx(Modal, {\n      show: this.state.purchasing,\n      modalClosed: this.purchaseCancelHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    }, orderSummary), sandwich);\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    ings: state.sandwichBuilder.ingredients,\n    error: state.sandwichBuilder.error,\n    price: state.sandwichBuilder.totalPrice\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onIngredientsInitialize: () => dispatch(actions.ingredientsInitialize()),\n    onIngredientAdd: ing => dispatch(actions.addIngredient(ing)),\n    onIngredientRemove: ing => dispatch(actions.removeIngredient(ing))\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SandwichBuilder);","map":{"version":3,"sources":["/Users/Taivnaa/Desktop/github/sandwich-builder/src/containers/SandwichBuilder/SandwichBuilder.js"],"names":["React","Component","connect","actions","Sandwich","Spinner","Modal","OrderSummary","BuildControls","SandwichBuilder","purchasing","setState","componentDidMount","props","onIngredientsInitialize","render","disabledInfo","ings","key","sandwich","error","orderSummary","onIngredientAdd","onIngredientRemove","price","purchaseHandler","purchaseCancelHandler","state","mapStateToProps","sandwichBuilder","ingredients","totalPrice","mapDispatchToProps","dispatch","ingredientsInitialize","ing","addIngredient","removeIngredient"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport * as actions from \"../../store/actions\";\n\nimport Sandwich from \"../../components/Sandwich/Sandwich\";\nimport Spinner from \"../../components/UI/Spinner\";\nimport Modal from \"../../components/UI/Modal/Modal\";\nimport OrderSummary from \"../../components/Sandwich/OrderSummary/OrderSummary\";\nimport BuildControls from \"../../components/Sandwich/BuildControls/BuildControls\";\n\nclass SandwichBuilder extends Component {\n  state = {\n    purchasing: false\n  };\n\n  componentDidMount() {\n    this.props.onIngredientsInitialize();\n  }\n\n  purchaseHandler = () => {\n    this.setState({ purchasing: true });\n  };\n\n  purchaseCancelHandler = () => {\n    this.setState({ purchasing: false });\n  };\n\n  render() {\n    const disabledInfo = {\n      ...this.props.ings\n    };\n    for (let key in disabledInfo) {\n      disabledInfo[key] = disabledInfo[key] <= 0;\n    }\n\n    let sandwich = this.props.error ? \"Something went wrong\" : <Spinner />;\n    let orderSummary = null;\n\n    if (this.props.ings) {\n      sandwich = (\n        <>\n          <Sandwich ingredients={this.props.ings} />\n          <BuildControls\n            ingredientAdded={this.props.onIngredientAdd}\n            ingredientRemoved={this.props.onIngredientRemove}\n            disabled={disabledInfo}\n            price={this.props.price}\n            ordered={this.purchaseHandler}\n          />\n        </>\n      );\n\n      orderSummary = (\n        <OrderSummary\n          ingredients={this.props.ings}\n          purchaseCancelled={this.purchaseCancelHandler}\n        />\n      );\n    }\n    return (\n      <React.Fragment>\n        <Modal\n          show={this.state.purchasing}\n          modalClosed={this.purchaseCancelHandler}\n        >\n          {orderSummary}\n        </Modal>\n        {sandwich}\n      </React.Fragment>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    ings: state.sandwichBuilder.ingredients,\n    error: state.sandwichBuilder.error,\n    price: state.sandwichBuilder.totalPrice\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onIngredientsInitialize: () => dispatch(actions.ingredientsInitialize()),\n    onIngredientAdd: ing => dispatch(actions.addIngredient(ing)),\n    onIngredientRemove: ing => dispatch(actions.removeIngredient(ing))\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(SandwichBuilder);\n"]},"metadata":{},"sourceType":"module"}