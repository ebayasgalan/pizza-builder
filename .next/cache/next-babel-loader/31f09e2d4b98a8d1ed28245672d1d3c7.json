{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime-corejs2/helpers/esm/toConsumableArray\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nvar _jsxFileName = \"/Users/Taivnaa/Desktop/github/sandwich-builder/src/components/Sandwich/Sandwich.js\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport classes from './Sandwich.css';\nimport SandwichIngredient from './SandwichIngredient/SandwichIngredient';\n\nvar sandwich = function sandwich(props) {\n  console.log('this is before transformation ', props.ingredients);\n\n  var transformedIngredients = _Object$keys(props.ingredients).map(function (igKey) {\n    return _toConsumableArray(Array(props.ingredients[igKey])).map(function (_, i) {\n      return __jsx(SandwichIngredient, {\n        key: igKey + i,\n        type: igKey,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 11\n        },\n        __self: this\n      });\n    });\n  }).reduce(function (arr, el) {\n    return arr.concat(el);\n  }, []);\n\n  if (transformedIngredients.length === 0) {\n    transformedIngredients = __jsx(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 18\n      },\n      __self: this\n    }, \"Please start adding ingredients!\");\n  }\n\n  console.log('this is inside sandwich js transformed one: ', transformedIngredients);\n  return __jsx(\"div\", {\n    className: classes.Sandwich,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24\n    },\n    __self: this\n  }, __jsx(SandwichIngredient, {\n    type: \"top-bread\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25\n    },\n    __self: this\n  }), transformedIngredients, __jsx(SandwichIngredient, {\n    type: \"bottom-bread\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27\n    },\n    __self: this\n  }));\n};\n\nexport default sandwich;","map":{"version":3,"sources":["/Users/Taivnaa/Desktop/github/sandwich-builder/src/components/Sandwich/Sandwich.js"],"names":["React","classes","SandwichIngredient","sandwich","props","console","log","ingredients","transformedIngredients","map","igKey","Array","_","i","reduce","arr","el","concat","length","Sandwich"],"mappings":";;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,OAAOC,OAAP,MAAoB,gBAApB;AACA,OAAOC,kBAAP,MAA+B,yCAA/B;;AAEA,IAAMC,QAAQ,GAAG,SAAXA,QAAW,CAACC,KAAD,EAAW;AAC1BC,EAAAA,OAAO,CAACC,GAAR,CAAY,gCAAZ,EAA6CF,KAAK,CAACG,WAAnD;;AACA,MAAIC,sBAAsB,GAAG,aAAYJ,KAAK,CAACG,WAAlB,EAC1BE,GAD0B,CACtB,UAAAC,KAAK,EAAI;AACZ,WAAO,mBAAIC,KAAK,CAACP,KAAK,CAACG,WAAN,CAAkBG,KAAlB,CAAD,CAAT,EAAqCD,GAArC,CAAyC,UAACG,CAAD,EAAIC,CAAJ,EAAU;AACxD,aAAO,MAAC,kBAAD;AAAoB,QAAA,GAAG,EAAEH,KAAK,GAAGG,CAAjC;AAAoC,QAAA,IAAI,EAAEH,KAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAP;AACD,KAFM,CAAP;AAGD,GAL0B,EAKxBI,MALwB,CAKjB,UAACC,GAAD,EAAMC,EAAN,EAAa;AACrB,WAAOD,GAAG,CAACE,MAAJ,CAAWD,EAAX,CAAP;AACH,GAP4B,EAO1B,EAP0B,CAA7B;;AASA,MAAIR,sBAAsB,CAACU,MAAvB,KAAkC,CAAtC,EAAyC;AACvCV,IAAAA,sBAAsB,GAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0CAAzB;AACD;;AAEDH,EAAAA,OAAO,CAACC,GAAR,CAAY,8CAAZ,EAA2DE,sBAA3D;AAEA,SACE;AAAK,IAAA,SAAS,EAAEP,OAAO,CAACkB,QAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,kBAAD;AAAoB,IAAA,IAAI,EAAC,WAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAEGX,sBAFH,EAGE,MAAC,kBAAD;AAAoB,IAAA,IAAI,EAAC,cAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHF,CADF;AAOD,CAxBD;;AA0BA,eAAeL,QAAf","sourcesContent":["import React from 'react';\n\nimport classes from './Sandwich.css';\nimport SandwichIngredient from './SandwichIngredient/SandwichIngredient';\n\nconst sandwich = (props) => {\n  console.log('this is before transformation ',props.ingredients);\n  let transformedIngredients = Object.keys(props.ingredients)\n    .map(igKey => {\n      return [...Array(props.ingredients[igKey])].map((_, i) => {\n        return <SandwichIngredient key={igKey + i} type={igKey} />;\n      });\n    }).reduce((arr, el) => {\n      return arr.concat(el)\n  }, []);\n\n  if (transformedIngredients.length === 0) {\n    transformedIngredients = <p>Please start adding ingredients!</p>;\n  }\n\n  console.log('this is inside sandwich js transformed one: ',transformedIngredients);\n\n  return (\n    <div className={classes.Sandwich}>\n      <SandwichIngredient type='top-bread' />\n      {transformedIngredients}\n      <SandwichIngredient type='bottom-bread' />\n    </div>\n  );\n};\n\nexport default sandwich;"]},"metadata":{},"sourceType":"module"}