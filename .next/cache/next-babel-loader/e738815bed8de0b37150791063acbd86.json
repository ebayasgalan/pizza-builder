{"ast":null,"code":"import _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/Taivnaa/Desktop/github/sandwich-builder/pages/auth.js\";\nvar __jsx = React.createElement;\nimport React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Redirect } from \"react-router-dom\";\nimport styled from \"styled-components\";\nimport Input from \"../src/components/UI/Input/Input\";\nimport Button from \"../src/components/UI/Button/Button\";\nimport Spinner from \"../src/components/UI/Spinner/Spinner\";\nimport * as actions from \"../src/store/actions/index\";\nimport { updateObject, checkValidity } from \"../src/shared/utility\";\nvar StyledAuth = styled.div.withConfig({\n  displayName: \"auth__StyledAuth\",\n  componentId: \"u6i4ym-0\"\n})([\"margin:20px auto;width:80%;text-align:center;box-shadow:0 2px 3px #ccc;border:1px solid #eee;padding:10px;box-sizing:border-box;@media (min-width:600px){width:500px;}\"]);\n\nvar Auth =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Auth, _Component);\n\n  function Auth() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Auth);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Auth)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      controls: {\n        email: {\n          elementType: \"input\",\n          elementConfig: {\n            type: \"email\",\n            placeholder: \"Mail Address\"\n          },\n          value: \"\",\n          validation: {\n            required: true,\n            isEmail: true\n          },\n          valid: false,\n          touched: false\n        },\n        password: {\n          elementType: \"input\",\n          elementConfig: {\n            type: \"password\",\n            placeholder: \"Password\"\n          },\n          value: \"\",\n          validation: {\n            required: true,\n            minLength: 6\n          },\n          valid: false,\n          touched: false\n        }\n      },\n      isSignup: true\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"inputChangedHandler\", function (event, controlName) {\n      var updatedControls = updateObject(_this.state.controls, _defineProperty({}, controlName, updateObject(_this.state.controls[controlName], {\n        value: event.target.value,\n        valid: checkValidity(event.target.value, _this.state.controls[controlName].validation),\n        touched: true\n      })));\n\n      _this.setState({\n        controls: updatedControls\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"submitHandler\", function (event) {\n      event.preventDefault();\n\n      _this.props.onAuth(_this.state.controls.email.value, _this.state.controls.password.value, _this.state.isSignup);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"switchAuthModeHandler\", function () {\n      _this.setState(function (prevState) {\n        return {\n          isSignup: !prevState.isSignup\n        };\n      });\n    });\n\n    return _this;\n  }\n\n  _createClass(Auth, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      if (!this.props.buildingBurger && this.props.authRedirectPath !== \"/\") {\n        this.props.onSetAuthRedirectPath();\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var formElementsArray = [];\n\n      for (var key in this.state.controls) {\n        formElementsArray.push({\n          id: key,\n          config: this.state.controls[key]\n        });\n      }\n\n      var form = formElementsArray.map(function (formElement) {\n        return __jsx(Input, {\n          key: formElement.id,\n          elementType: formElement.config.elementType,\n          elementConfig: formElement.config.elementConfig,\n          value: formElement.config.value,\n          invalid: !formElement.config.valid,\n          shouldValidate: formElement.config.validation,\n          touched: formElement.config.touched,\n          changed: function changed(event) {\n            return _this2.inputChangedHandler(event, formElement.id);\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 106\n          },\n          __self: this\n        });\n      });\n\n      if (this.props.loading) {\n        form = __jsx(Spinner, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 119\n          },\n          __self: this\n        });\n      }\n\n      var errorMessage = null;\n\n      if (this.props.error) {\n        errorMessage = __jsx(\"p\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 125\n          },\n          __self: this\n        }, this.props.error.message);\n      }\n\n      var authRedirect = null;\n\n      if (this.props.isAuthenticated) {\n        authRedirect = __jsx(Redirect, {\n          to: this.props.authRedirectPath,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 130\n          },\n          __self: this\n        });\n      }\n\n      return __jsx(StyledAuth, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 134\n        },\n        __self: this\n      }, authRedirect, errorMessage, __jsx(\"form\", {\n        onSubmit: this.submitHandler,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 137\n        },\n        __self: this\n      }, form, __jsx(Button, {\n        btnType: \"Success\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 139\n        },\n        __self: this\n      }, \"SUBMIT\")), __jsx(Button, {\n        clicked: this.switchAuthModeHandler,\n        btnType: \"Danger\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 141\n        },\n        __self: this\n      }, \"SWITCH TO \", this.state.isSignup ? \"SIGNIN\" : \"SIGNUP\"));\n    }\n  }]);\n\n  return Auth;\n}(Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    loading: state.auth.loading,\n    error: state.auth.error,\n    isAuthenticated: state.auth.token !== null,\n    buildingBurger: state.burgerBuilder.building,\n    authRedirectPath: state.auth.authRedirectPath\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    onAuth: function onAuth(email, password, isSignup) {\n      return dispatch(actions.auth(email, password, isSignup));\n    },\n    onSetAuthRedirectPath: function onSetAuthRedirectPath() {\n      return dispatch(actions.setAuthRedirectPath(\"/\"));\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Auth);","map":{"version":3,"sources":["/Users/Taivnaa/Desktop/github/sandwich-builder/pages/auth.js"],"names":["React","Component","connect","Redirect","styled","Input","Button","Spinner","actions","updateObject","checkValidity","StyledAuth","div","Auth","controls","email","elementType","elementConfig","type","placeholder","value","validation","required","isEmail","valid","touched","password","minLength","isSignup","event","controlName","updatedControls","state","target","setState","preventDefault","props","onAuth","prevState","buildingBurger","authRedirectPath","onSetAuthRedirectPath","formElementsArray","key","push","id","config","form","map","formElement","inputChangedHandler","loading","errorMessage","error","message","authRedirect","isAuthenticated","submitHandler","switchAuthModeHandler","mapStateToProps","auth","token","burgerBuilder","building","mapDispatchToProps","dispatch","setAuthRedirectPath"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Redirect } from \"react-router-dom\";\nimport styled from \"styled-components\";\n\nimport Input from \"../src/components/UI/Input/Input\";\nimport Button from \"../src/components/UI/Button/Button\";\nimport Spinner from \"../src/components/UI/Spinner/Spinner\";\nimport * as actions from \"../src/store/actions/index\";\nimport { updateObject, checkValidity } from \"../src/shared/utility\";\n\nconst StyledAuth = styled.div`\n  margin: 20px auto;\n  width: 80%;\n  text-align: center;\n  box-shadow: 0 2px 3px #ccc;\n  border: 1px solid #eee;\n  padding: 10px;\n  box-sizing: border-box;\n\n  @media (min-width: 600px) {\n    width: 500px;\n  }\n`;\n\nclass Auth extends Component {\n  state = {\n    controls: {\n      email: {\n        elementType: \"input\",\n        elementConfig: {\n          type: \"email\",\n          placeholder: \"Mail Address\"\n        },\n        value: \"\",\n        validation: {\n          required: true,\n          isEmail: true\n        },\n        valid: false,\n        touched: false\n      },\n      password: {\n        elementType: \"input\",\n        elementConfig: {\n          type: \"password\",\n          placeholder: \"Password\"\n        },\n        value: \"\",\n        validation: {\n          required: true,\n          minLength: 6\n        },\n        valid: false,\n        touched: false\n      }\n    },\n    isSignup: true\n  };\n\n  componentDidMount() {\n    if (!this.props.buildingBurger && this.props.authRedirectPath !== \"/\") {\n      this.props.onSetAuthRedirectPath();\n    }\n  }\n\n  inputChangedHandler = (event, controlName) => {\n    const updatedControls = updateObject(this.state.controls, {\n      [controlName]: updateObject(this.state.controls[controlName], {\n        value: event.target.value,\n        valid: checkValidity(\n          event.target.value,\n          this.state.controls[controlName].validation\n        ),\n        touched: true\n      })\n    });\n    this.setState({ controls: updatedControls });\n  };\n\n  submitHandler = event => {\n    event.preventDefault();\n    this.props.onAuth(\n      this.state.controls.email.value,\n      this.state.controls.password.value,\n      this.state.isSignup\n    );\n  };\n\n  switchAuthModeHandler = () => {\n    this.setState(prevState => {\n      return { isSignup: !prevState.isSignup };\n    });\n  };\n\n  render() {\n    const formElementsArray = [];\n    for (let key in this.state.controls) {\n      formElementsArray.push({\n        id: key,\n        config: this.state.controls[key]\n      });\n    }\n\n    let form = formElementsArray.map(formElement => (\n      <Input\n        key={formElement.id}\n        elementType={formElement.config.elementType}\n        elementConfig={formElement.config.elementConfig}\n        value={formElement.config.value}\n        invalid={!formElement.config.valid}\n        shouldValidate={formElement.config.validation}\n        touched={formElement.config.touched}\n        changed={event => this.inputChangedHandler(event, formElement.id)}\n      />\n    ));\n\n    if (this.props.loading) {\n      form = <Spinner />;\n    }\n\n    let errorMessage = null;\n\n    if (this.props.error) {\n      errorMessage = <p>{this.props.error.message}</p>;\n    }\n\n    let authRedirect = null;\n    if (this.props.isAuthenticated) {\n      authRedirect = <Redirect to={this.props.authRedirectPath} />;\n    }\n\n    return (\n      <StyledAuth>\n        {authRedirect}\n        {errorMessage}\n        <form onSubmit={this.submitHandler}>\n          {form}\n          <Button btnType=\"Success\">SUBMIT</Button>\n        </form>\n        <Button clicked={this.switchAuthModeHandler} btnType=\"Danger\">\n          SWITCH TO {this.state.isSignup ? \"SIGNIN\" : \"SIGNUP\"}\n        </Button>\n      </StyledAuth>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    loading: state.auth.loading,\n    error: state.auth.error,\n    isAuthenticated: state.auth.token !== null,\n    buildingBurger: state.burgerBuilder.building,\n    authRedirectPath: state.auth.authRedirectPath\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onAuth: (email, password, isSignup) =>\n      dispatch(actions.auth(email, password, isSignup)),\n    onSetAuthRedirectPath: () => dispatch(actions.setAuthRedirectPath(\"/\"))\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Auth);\n"]},"metadata":{},"sourceType":"module"}