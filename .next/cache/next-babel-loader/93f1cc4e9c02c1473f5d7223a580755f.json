{"ast":null,"code":"import _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/Taivnaa/Desktop/github/sandwich-builder/pages/auth.js\";\nvar __jsx = React.createElement;\nimport React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Redirect } from \"react-router-dom\";\nimport styled from \"styled-components\";\nimport Input from \"../../components/UI/Input/Input\";\nimport Button from \"../../components/UI/Button/Button\";\nimport Spinner from \"../../components/UI/Spinner/Spinner\";\nimport * as actions from \"../../store/actions/index\";\nimport { updateObject, checkValidity } from \"../../shared/utility\";\nconst StyledAuth = styled.div.withConfig({\n  displayName: \"auth__StyledAuth\",\n  componentId: \"u6i4ym-0\"\n})([\"margin:20px auto;width:80%;text-align:center;box-shadow:0 2px 3px #ccc;border:1px solid #eee;padding:10px;box-sizing:border-box;@media (min-width:600px){width:500px;}\"]);\n\nclass Auth extends Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      controls: {\n        email: {\n          elementType: \"input\",\n          elementConfig: {\n            type: \"email\",\n            placeholder: \"Mail Address\"\n          },\n          value: \"\",\n          validation: {\n            required: true,\n            isEmail: true\n          },\n          valid: false,\n          touched: false\n        },\n        password: {\n          elementType: \"input\",\n          elementConfig: {\n            type: \"password\",\n            placeholder: \"Password\"\n          },\n          value: \"\",\n          validation: {\n            required: true,\n            minLength: 6\n          },\n          valid: false,\n          touched: false\n        }\n      },\n      isSignup: true\n    });\n\n    _defineProperty(this, \"inputChangedHandler\", (event, controlName) => {\n      const updatedControls = updateObject(this.state.controls, {\n        [controlName]: updateObject(this.state.controls[controlName], {\n          value: event.target.value,\n          valid: checkValidity(event.target.value, this.state.controls[controlName].validation),\n          touched: true\n        })\n      });\n      this.setState({\n        controls: updatedControls\n      });\n    });\n\n    _defineProperty(this, \"submitHandler\", event => {\n      event.preventDefault();\n      this.props.onAuth(this.state.controls.email.value, this.state.controls.password.value, this.state.isSignup);\n    });\n\n    _defineProperty(this, \"switchAuthModeHandler\", () => {\n      this.setState(prevState => {\n        return {\n          isSignup: !prevState.isSignup\n        };\n      });\n    });\n  }\n\n  componentDidMount() {\n    if (!this.props.buildingBurger && this.props.authRedirectPath !== \"/\") {\n      this.props.onSetAuthRedirectPath();\n    }\n  }\n\n  render() {\n    const formElementsArray = [];\n\n    for (let key in this.state.controls) {\n      formElementsArray.push({\n        id: key,\n        config: this.state.controls[key]\n      });\n    }\n\n    let form = formElementsArray.map(formElement => __jsx(Input, {\n      key: formElement.id,\n      elementType: formElement.config.elementType,\n      elementConfig: formElement.config.elementConfig,\n      value: formElement.config.value,\n      invalid: !formElement.config.valid,\n      shouldValidate: formElement.config.validation,\n      touched: formElement.config.touched,\n      changed: event => this.inputChangedHandler(event, formElement.id),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    }));\n\n    if (this.props.loading) {\n      form = __jsx(Spinner, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119\n        },\n        __self: this\n      });\n    }\n\n    let errorMessage = null;\n\n    if (this.props.error) {\n      errorMessage = __jsx(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 125\n        },\n        __self: this\n      }, this.props.error.message);\n    }\n\n    let authRedirect = null;\n\n    if (this.props.isAuthenticated) {\n      authRedirect = __jsx(Redirect, {\n        to: this.props.authRedirectPath,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 130\n        },\n        __self: this\n      });\n    }\n\n    return __jsx(StyledAuth, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134\n      },\n      __self: this\n    }, authRedirect, errorMessage, __jsx(\"form\", {\n      onSubmit: this.submitHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137\n      },\n      __self: this\n    }, form, __jsx(Button, {\n      btnType: \"Success\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139\n      },\n      __self: this\n    }, \"SUBMIT\")), __jsx(Button, {\n      clicked: this.switchAuthModeHandler,\n      btnType: \"Danger\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141\n      },\n      __self: this\n    }, \"SWITCH TO \", this.state.isSignup ? \"SIGNIN\" : \"SIGNUP\"));\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    loading: state.auth.loading,\n    error: state.auth.error,\n    isAuthenticated: state.auth.token !== null,\n    buildingBurger: state.burgerBuilder.building,\n    authRedirectPath: state.auth.authRedirectPath\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onAuth: (email, password, isSignup) => dispatch(actions.auth(email, password, isSignup)),\n    onSetAuthRedirectPath: () => dispatch(actions.setAuthRedirectPath(\"/\"))\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Auth);","map":{"version":3,"sources":["/Users/Taivnaa/Desktop/github/sandwich-builder/pages/auth.js"],"names":["React","Component","connect","Redirect","styled","Input","Button","Spinner","actions","updateObject","checkValidity","StyledAuth","div","Auth","controls","email","elementType","elementConfig","type","placeholder","value","validation","required","isEmail","valid","touched","password","minLength","isSignup","event","controlName","updatedControls","state","target","setState","preventDefault","props","onAuth","prevState","componentDidMount","buildingBurger","authRedirectPath","onSetAuthRedirectPath","render","formElementsArray","key","push","id","config","form","map","formElement","inputChangedHandler","loading","errorMessage","error","message","authRedirect","isAuthenticated","submitHandler","switchAuthModeHandler","mapStateToProps","auth","token","burgerBuilder","building","mapDispatchToProps","dispatch","setAuthRedirectPath"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Redirect } from \"react-router-dom\";\nimport styled from \"styled-components\";\n\nimport Input from \"../../components/UI/Input/Input\";\nimport Button from \"../../components/UI/Button/Button\";\nimport Spinner from \"../../components/UI/Spinner/Spinner\";\nimport * as actions from \"../../store/actions/index\";\nimport { updateObject, checkValidity } from \"../../shared/utility\";\n\nconst StyledAuth = styled.div`\n  margin: 20px auto;\n  width: 80%;\n  text-align: center;\n  box-shadow: 0 2px 3px #ccc;\n  border: 1px solid #eee;\n  padding: 10px;\n  box-sizing: border-box;\n\n  @media (min-width: 600px) {\n    width: 500px;\n  }\n`;\n\nclass Auth extends Component {\n  state = {\n    controls: {\n      email: {\n        elementType: \"input\",\n        elementConfig: {\n          type: \"email\",\n          placeholder: \"Mail Address\"\n        },\n        value: \"\",\n        validation: {\n          required: true,\n          isEmail: true\n        },\n        valid: false,\n        touched: false\n      },\n      password: {\n        elementType: \"input\",\n        elementConfig: {\n          type: \"password\",\n          placeholder: \"Password\"\n        },\n        value: \"\",\n        validation: {\n          required: true,\n          minLength: 6\n        },\n        valid: false,\n        touched: false\n      }\n    },\n    isSignup: true\n  };\n\n  componentDidMount() {\n    if (!this.props.buildingBurger && this.props.authRedirectPath !== \"/\") {\n      this.props.onSetAuthRedirectPath();\n    }\n  }\n\n  inputChangedHandler = (event, controlName) => {\n    const updatedControls = updateObject(this.state.controls, {\n      [controlName]: updateObject(this.state.controls[controlName], {\n        value: event.target.value,\n        valid: checkValidity(\n          event.target.value,\n          this.state.controls[controlName].validation\n        ),\n        touched: true\n      })\n    });\n    this.setState({ controls: updatedControls });\n  };\n\n  submitHandler = event => {\n    event.preventDefault();\n    this.props.onAuth(\n      this.state.controls.email.value,\n      this.state.controls.password.value,\n      this.state.isSignup\n    );\n  };\n\n  switchAuthModeHandler = () => {\n    this.setState(prevState => {\n      return { isSignup: !prevState.isSignup };\n    });\n  };\n\n  render() {\n    const formElementsArray = [];\n    for (let key in this.state.controls) {\n      formElementsArray.push({\n        id: key,\n        config: this.state.controls[key]\n      });\n    }\n\n    let form = formElementsArray.map(formElement => (\n      <Input\n        key={formElement.id}\n        elementType={formElement.config.elementType}\n        elementConfig={formElement.config.elementConfig}\n        value={formElement.config.value}\n        invalid={!formElement.config.valid}\n        shouldValidate={formElement.config.validation}\n        touched={formElement.config.touched}\n        changed={event => this.inputChangedHandler(event, formElement.id)}\n      />\n    ));\n\n    if (this.props.loading) {\n      form = <Spinner />;\n    }\n\n    let errorMessage = null;\n\n    if (this.props.error) {\n      errorMessage = <p>{this.props.error.message}</p>;\n    }\n\n    let authRedirect = null;\n    if (this.props.isAuthenticated) {\n      authRedirect = <Redirect to={this.props.authRedirectPath} />;\n    }\n\n    return (\n      <StyledAuth>\n        {authRedirect}\n        {errorMessage}\n        <form onSubmit={this.submitHandler}>\n          {form}\n          <Button btnType=\"Success\">SUBMIT</Button>\n        </form>\n        <Button clicked={this.switchAuthModeHandler} btnType=\"Danger\">\n          SWITCH TO {this.state.isSignup ? \"SIGNIN\" : \"SIGNUP\"}\n        </Button>\n      </StyledAuth>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    loading: state.auth.loading,\n    error: state.auth.error,\n    isAuthenticated: state.auth.token !== null,\n    buildingBurger: state.burgerBuilder.building,\n    authRedirectPath: state.auth.authRedirectPath\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onAuth: (email, password, isSignup) =>\n      dispatch(actions.auth(email, password, isSignup)),\n    onSetAuthRedirectPath: () => dispatch(actions.setAuthRedirectPath(\"/\"))\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Auth);\n"]},"metadata":{},"sourceType":"module"}